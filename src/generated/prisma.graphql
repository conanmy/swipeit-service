# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type User implements Node {
  id: ID!
  name: String!
  friends(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type WeeklyScore implements Node {
  id: ID!
  user(where: UserWhereInput): User!
  week: Int
  score: Int
}


#
# Other Types
#

type AggregateUser {
  count: Int!
}

type AggregateWeeklyScore {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createWeeklyScore(data: WeeklyScoreCreateInput!): WeeklyScore!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateWeeklyScore(data: WeeklyScoreUpdateInput!, where: WeeklyScoreWhereUniqueInput!): WeeklyScore
  deleteUser(where: UserWhereUniqueInput!): User
  deleteWeeklyScore(where: WeeklyScoreWhereUniqueInput!): WeeklyScore
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertWeeklyScore(where: WeeklyScoreWhereUniqueInput!, create: WeeklyScoreCreateInput!, update: WeeklyScoreUpdateInput!): WeeklyScore!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyWeeklyScores(data: WeeklyScoreUpdateInput!, where: WeeklyScoreWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyWeeklyScores(where: WeeklyScoreWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  weeklyScores(where: WeeklyScoreWhereInput, orderBy: WeeklyScoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WeeklyScore]!
  user(where: UserWhereUniqueInput!): User
  weeklyScore(where: WeeklyScoreWhereUniqueInput!): WeeklyScore
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  weeklyScoresConnection(where: WeeklyScoreWhereInput, orderBy: WeeklyScoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WeeklyScoreConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  weeklyScore(where: WeeklyScoreSubscriptionWhereInput): WeeklyScoreSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  friends: UserCreateManyInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  friends: UserUpdateManyInput
}

input UserUpdateInput {
  name: String
  friends: UserUpdateManyInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  friends_every: UserWhereInput
  friends_some: UserWhereInput
  friends_none: UserWhereInput
}

input UserWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type WeeklyScoreConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [WeeklyScoreEdge]!
  aggregate: AggregateWeeklyScore!
}

input WeeklyScoreCreateInput {
  week: Int
  score: Int
  user: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type WeeklyScoreEdge {
  """
  The item at the end of the edge.
  """
  node: WeeklyScore!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum WeeklyScoreOrderByInput {
  id_ASC
  id_DESC
  week_ASC
  week_DESC
  score_ASC
  score_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WeeklyScorePreviousValues {
  id: ID!
  week: Int
  score: Int
}

type WeeklyScoreSubscriptionPayload {
  mutation: MutationType!
  node: WeeklyScore
  updatedFields: [String!]
  previousValues: WeeklyScorePreviousValues
}

input WeeklyScoreSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WeeklyScoreSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [WeeklyScoreSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WeeklyScoreWhereInput
}

input WeeklyScoreUpdateInput {
  week: Int
  score: Int
  user: UserUpdateOneInput
}

input WeeklyScoreWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WeeklyScoreWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [WeeklyScoreWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  week: Int
  """
  All values that are not equal to given value.
  """
  week_not: Int
  """
  All values that are contained in given list.
  """
  week_in: [Int!]
  """
  All values that are not contained in given list.
  """
  week_not_in: [Int!]
  """
  All values less than the given value.
  """
  week_lt: Int
  """
  All values less than or equal the given value.
  """
  week_lte: Int
  """
  All values greater than the given value.
  """
  week_gt: Int
  """
  All values greater than or equal the given value.
  """
  week_gte: Int
  score: Int
  """
  All values that are not equal to given value.
  """
  score_not: Int
  """
  All values that are contained in given list.
  """
  score_in: [Int!]
  """
  All values that are not contained in given list.
  """
  score_not_in: [Int!]
  """
  All values less than the given value.
  """
  score_lt: Int
  """
  All values less than or equal the given value.
  """
  score_lte: Int
  """
  All values greater than the given value.
  """
  score_gt: Int
  """
  All values greater than or equal the given value.
  """
  score_gte: Int
  user: UserWhereInput
}

input WeeklyScoreWhereUniqueInput {
  id: ID
}
